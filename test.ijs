load'~Projects/mk/microkanren.ijs'

test_var_bnat =: 3 : 'assert.0&=var<2'
test_var_bbool =: 3 : 'assert.0&=var<1'
test_var_bnull =: 3 : 'assert.0&=var<'''''
test_var_nat =: 3 : 'assert.var 2'
test_var_bool =: 3 : 'assert.var 1'
test_var_null =: 3 : 'assert.0&=var'''''
test_var_char =: 3 : 'assert.0&=var''a'''
test_var_bchar =: 3 : 'assert.0&=var<''a'''
test_var_vecint=:3 :'assert.0&= var i.2'
test_var_vecbox=:3 :'assert.0&=var ;/ i.2'

test_find_natempty =: 3 : 'assert. 2&-:2 find (<'''')'
test_find_natnat =: 3 : 'assert. 2&-:2 find (<1)'
test_find_natself =: 3 : 'assert. ''''&-:2 find (2;'''')'
test_find_nullempty =: 3 : 'assert. ''''&-:'''' find (<'''')'
test_find_nullnat =: 3 : 'assert. ''''&-:'''' find (<2)'
test_find_char =: 3 : 'assert. ''a''&-:''a'' find (<2)'
test_find_walk =: 3 : 'assert. 4&-:2 find (2 3;3;4)'
test_find_walk_char =: 3 : 'assert. ''a''&-:2 find (2 3;3;''a'')'
find_cycle_expect =: 'stack error'
test_find_cycle =: 3 : '2 find (2 3;3;2)'
find_absent_expect=: 'index error'
test_find_absent =: 3 : '2 find (<2)'

test_occurs_self=:3 :'assert.0&= 0 occurs 0 (<'''')'
test_occurs_yes_simple=:3 :'assert. 0 occurs (<0) (<'''')'
test_occurs_no=:3 :'assert.0&= 0 occurs 1 (<'''')'
test_occurs_no_simple=:3 :'assert.0&= 0 occurs (<1) (<'''')'
test_occurs_yes_walk=:3 :'assert. 0 occurs (<1) (1;0)'
test_occurs_no_walk=:3 :'assert.0&= 0 occurs (<1) (1;2)'
test_occurs_tree=:3 :'assert.0&= 0 occurs (1;2;3) (<'''')'
test_occurs_nested=:3 :'assert.0 occurs (1;(<<(3;0));3) (<'''')'
test_occurs_nested_walk=:3 :'assert.0 occurs (1;(<<(3;2));3) (2;0)'

test_exts_empty=:3 :'assert.((,1);2)&-:1 exts 2 (<'''')'
test_exts_append=:3 :'assert.((3,1);4;2)&-:3 exts 4 (1;2)'

NB.test_unify_null_null =: 3 : 'assert.0&='''' unify '''' (0;'''';'''')'
NB.test_unify_bnull_bnull =: 3 : 'assert.(0;'''';'''')&-:(<'''')unify(<'''')(0;'''';'''')'
NB.test_unify_null_var =: 3 : 'assert.0&= '''' unify (<3) (0;'''';'''')'
NB.test_unify_bnat_bnat =: 3 : 'assert.(0;(,<4);<,<3)&-:(<4) unify (<3) (0;'''';'''')'
NB.test_unify_unequal_shape=:3 :'assert.0&=(<4) unify (3;2) (0;'''';'''')'
NB.test_unify_crisscross =: 3 : 'assert. (0;(0;1);<(''b'';''a''))&-:(''a'';0) unify (1;''b'') (0;'''';'''')'