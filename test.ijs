load'~Projects/mk/microkanren.ijs'

fives =: 3 : '((,5) equ (y {::~ ;~0) fsh) dis (3 : ''<''''fives ('''' , ((5!:5) <''''y'''') , '''')'''''') y'
sixes =: 3 : '((,6) equ (y {::~ ;~0) fsh) dis (3 : ''<''''sixes ('''' , ((5!:5) <''''y'''') , '''')'''''') y'
fives_and_sixes =: 3 : 'fives dis sixes y'

test_var_bnat =: 3 : 'assert.0&=var<2'
test_var_bbool =: 3 : 'assert.0&=var<1'
test_var_bnull =: 3 : 'assert.0&=var<'''''
test_var_nat =: 3 : 'assert.var 2'
test_var_bool =: 3 : 'assert.0&=var 1'
test_var_null =: 3 : 'assert.0&=var'''''
test_var_char =: 3 : 'assert.0&=var''a'''
test_var_bchar =: 3 : 'assert.0&=var<''a'''
test_var_vecint=:3 :'assert.0&= var i.2'
test_var_vecbox=:3 :'assert.0&=var ;/ i.2'

test_get_natempty =: 3 : 'assert. 2&-:(<2) get 2'
test_get_natself =: 3 : 'assert. 2&-:(2 2;2) get 2'
test_get_nullempty =: 3 : 'assert. ''''&-:(<2) get '''''
test_get_nullnat =: 3 : 'assert. ''''&-:(2 2;2) get '''''
test_get_walk =: 3 : 'assert. 4&-:(2 2 3;3;4) get 2'
test_get_walk_char =: 3 : 'assert. ''a''&-:(2 2 3;3;''a'') get 2'

test_occ_self=:3 :'assert.(<2;2) occ (<2)'
test_occ_yes_simple=:3 :'assert. (<2;<<2) occ (<2)'
test_occ_no=:3 :'assert.0&= (<2;3) occ (<2)'
test_occ_no_simple=:3 :'assert.0&= (<2;<<3) occ (<2)'
test_occ_yes_walk=:3 :'assert. (<2;<<3) occ (2 3;2)'
test_occ_no_walk=:3 :'assert.0&= (<2;<<3) occ (2 3;4)'
test_occ_tree_no=:3 :'assert.0&= (<2;<(3;4;5)) occ (<2)'
test_occ_tree_yes=:3 :'assert.(<2;<(2;3;4)) occ (<2)'
test_occ_nested=:3 :'assert.(<2;<(3;(<<(4;2));4)) occ (<2)'
test_occ_nested_walk=:3 :'assert.(<2;<(3;(<<(4;3));4)) occ (2 3;2)'

test_ext_empty=:3 :'assert.(2 2;3)&-:(<2;3) ext (<2)'
test_ext_append=:3 :'assert.(2 2 4;3;5)&-:(<4;5) ext (2 2;3)'
test_ext_equal=:3 :'assert. (<2)&-: (<2;2) ext (<2)'
test_ext_occ=:3 :'assert. 0&-: (<2;<<2) ext (<2)'
test_ext_path_compression=:3 :'assert.(2 2 4;''z'';2)&-:(<4;''z'') ext (2 2;''z'')'

test_uni_null_null =: 3 : 'assert.(<2)&='''' uni '''' (<2)'
test_uni_bnull_bnull =: 3 : 'assert.(<2)&-:(<'''')uni(<'''') (<2)'
test_uni_null_nat =: 3 : 'assert.(4 3;'''')&-: '''' uni 3 (<4)'
test_uni_nat_nat =: 3 : 'assert.(5 4;3)&-:4 uni 3 (<5)'
test_uni_bnat_bnat =: 3 : 'assert.(5 4;3)&-:(<4) uni (<3) (<5)'
test_uni_unequal_shape=:3 :'assert.0&=(<4) uni (3;2) (<2)'
test_uni_equal=:3 : 'assert.(<2)&-:2 uni 2 (<2)'
test_uni_occ=:3 : 'assert.0&= 2 uni (<2) (<2)'
test_uni_occ_walk=:3 : 'assert.0&=2 uni (<3) (4 3;2)'
test_uni_crisscross =: 3 : 'assert. (4 2 3;''b'';''a'')&-:(''a'';2) uni (3;''b'') (<4)'
test_uni_nested =: 3 : 'assert.(4 2 3;''d'';''c'')&-:(''a'';<<(''c'';2)) uni (''b'';<<(3;''d'')) (<4)'
test_uni_walk =: 3 : 'assert.(4 2 3;3;1)&-:2 uni 3 (4 2 3;3;1)'
test_uni_walk_add =: 3 : 'assert.(5 2 3 2;4;''a'';3)&-:2 uni 3 (5 2 3;4;''a'')'

test_infinite_stream_dfs =: 3 : 'assert. (4#<3 2;,6)&-: 4 cis sixes'
test_infinite_stream_interleave =: 3 : 'assert. (;3#<(3 2;,5);<(3 2;,6))&-: 6 cis fives_and_sixes'

test_con =: 3 : 'assert. (,<4 2 3;''z'';2)&-: (''z'' equ 2) con (3 equ 2 fsh) fsh est'