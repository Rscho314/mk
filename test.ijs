load'~Projects/mk/microkanren.ijs'

test_var_bnat =: 3 : 'assert. var (<2)'
test_var_bbool =: 3 : 'assert. var (<1)'
var_bnull_expect =: 'assertion failure'
test_var_bnull =: 3 : 'assert. var (<'''')'
var_nat_expect =: 'assertion failure'
test_var_nat =: 3 : 'assert. var (2)'
var_bool_expect =: 'assertion failure'
test_var_bool =: 3 : 'assert. var (1)'
var_null_expect =: 'assertion failure'
test_var_null =: 3 : 'assert. var '''''

test_find_bnat_empty =: 3 : 'assert.(<2)&-:(<2) find (0;'''';'''')'
test_find_bnat_term =: 3 : 'assert.(<1)&-:(<2) find (0;(<2);<<1)'
test_find_bnat_bnat =: 3 : 'assert.(<3)&-:(<2) find (0;(<2);<<3)'
test_find_bnat_char =: 3 : 'assert.(<''a'')&-:(<2) find (0;(<2);<<''a'')'
test_find_bnat_null =: 3 : 'assert.(<'''')&-:(<2) find (0;(<2);<<'''')'
test_find_bnat_walk =: 3 : 'assert.(<4)&-:(<2) find (0;(2;3);<3;4)'
NB. find does not do the occur check & always succeeds
test_find_bnat_stackerr =: 3 : 'assert.(<2)&-:(<2) find (0;(<2);<<2)'

test_exts_bnat =: 3 :'assert.(0;(3;2);<4;1)&-:(<2) exts (<1) (0;(<3);<<4)'
test_exts_multiple =: 3 :'assert.(0;(3;6;7);<4;8;9)&-:(6;7) exts (8;9) (0;(<3);<<4)'
test_exts_multidimension =: 3 :'assert.((<0),(<9;10;11;12;13;14;15;16;17),<00;01;2;3;4;5;6;7;8)&-:(3 3$;/9&+i.9) exts (3 3$;/i.9) (0;'''';'''')'
test_exts_empty =: 3 :'assert.(0;(,<2);<,<1)&-:(<2) exts (<1) (0;'''';'''')'

test_occurs_yes =: 3 :'assert. (<4) occurs (0;(3;2);<4;1)'
test_occurs_no =: 3 :'assert. 0&=(<0) occurs (0;(3;2);<4;1)'
test_occurs_multiple_all =: 3 :'assert. (3;4) occurs (0;(3;2);<4;1)'
test_occurs_multiple_none =: 3 :'assert. 0&= (5;6) occurs (0;(3;2);<4;1)'
test_occurs_multiple_some =: 3 :'assert. (5;1) occurs (0;(3;2);<4;1)'
test_occurs_wrong =: 3 :'assert. 0&=(0) occurs (0;(3;2);<4;1)'
test_occurs_empty =: 3 :'assert. 0&=(<4) occurs (0;'''';'''')'

NB.unification is only defined on boxed arrays (corresponds to heterogeneous lists in minikanren)
test_unify_null_null =: 3 : 'assert.0&='''' unify '''' (0;'''';'''')'
test_unify_bnull_bnull =: 3 : 'assert.(0;'''';'''')&-:(<'''')unify(<'''')(0;'''';'''')'
test_unify_null_var =: 3 : 'assert.0&= '''' unify (<3) (0;'''';'''')'
test_unify_bnat_bnat =: 3 : 'assert.(0;(,<4);<,<3)&-:(<4) unify (<3) (0;'''';'''')'
test_unify_unequal_shape=:3 :'assert.0&=(<4) unify (3;2) (0;'''';'''')'
test_unify_crisscross =: 3 : 'assert. (0;(0;1);<(''b'';''a''))&-:(''a'';0) unify (1;''b'') (0;'''';'''')'